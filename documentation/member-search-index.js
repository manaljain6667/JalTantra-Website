memberSearchIndex = [{"p":"org.coinor","c":"Ipopt","l":"ACCEPTABLE_LEVEL"},{"p":"optimizer","c":"Problem","l":"add(Constraint)","url":"add(optimizer.Constraint)"},{"p":"optimizer","c":"Linear","l":"add(double, String)","url":"add(double,java.lang.String)"},{"p":"optimizer","c":"edgeGroup","l":"addEdge(edgeGroup)","url":"addEdge(optimizer.edgeGroup)"},{"p":"optimizer","c":"edgeGroup","l":"addEndNode(int)"},{"p":"org.coinor","c":"Ipopt","l":"AddIpoptIntOption(long, String, int)","url":"AddIpoptIntOption(long,java.lang.String,int)"},{"p":"org.coinor","c":"Ipopt","l":"AddIpoptNumOption(long, String, double)","url":"AddIpoptNumOption(long,java.lang.String,double)"},{"p":"org.coinor","c":"Ipopt","l":"AddIpoptStrOption(long, String, String)","url":"AddIpoptStrOption(long,java.lang.String,java.lang.String)"},{"p":"optimizer","c":"Node","l":"addToDownstreamNodes(Node)","url":"addToDownstreamNodes(optimizer.Node)"},{"p":"optimizer","c":"Node","l":"addToDownstreamNodes(Set<Node>)","url":"addToDownstreamNodes(java.util.Set)"},{"p":"optimizer","c":"Node","l":"addToOutgoingPipes(Pipe)","url":"addToOutgoingPipes(optimizer.Pipe)"},{"p":"optimizer","c":"Node","l":"addToServedNodes(Node)","url":"addToServedNodes(optimizer.Node)"},{"p":"optimizer","c":"Node","l":"addToServedNodes(Set<Node>)","url":"addToServedNodes(java.util.Set)"},{"p":"optimizer","c":"Node","l":"addToSourceToNodePipes(List<Pipe>)","url":"addToSourceToNodePipes(java.util.List)"},{"p":"optimizer","c":"Node","l":"addToSourceToNodePipes(Pipe)","url":"addToSourceToNodePipes(optimizer.Pipe)"},{"p":"optimizer","c":"Node","l":"addToUpstreamNodes(Node)","url":"addToUpstreamNodes(optimizer.Node)"},{"p":"optimizer","c":"Node","l":"addToUpstreamNodes(Set<Node>)","url":"addToUpstreamNodes(java.util.Set)"},{"p":"optimizer","c":"redGraph","l":"adjList"},{"p":"structs","c":"EsrGeneralStruct","l":"allow_dummy"},{"p":"optimizer","c":"Node","l":"allowESR"},{"p":"optimizer","c":"Pipe","l":"allowParallel"},{"p":"optimizer","c":"Pipe","l":"allowPump"},{"p":"optimizer","c":"Optimizer","l":"attempts"},{"p":"structs","c":"EsrCostStruct","l":"basecost"},{"p":"optimizer","c":"EsrCost","l":"baseCost"},{"p":"optimizer","c":"Node","l":"basedemand"},{"p":"optimizer","c":"redGraph","l":"bridgeOrient"},{"p":"optimizer","c":"redGraph","l":"bridges"},{"p":"optimizer","c":"redGraph","l":"bridgeSet()"},{"p":"org.coinor","c":"Ipopt","l":"C_STYLE"},{"p":"org.coinor","c":"Ipopt","l":"callback_grad_f"},{"p":"org.coinor","c":"Ipopt","l":"callback_hess"},{"p":"org.coinor","c":"Ipopt","l":"callback_jac_g"},{"p":"structs","c":"ResultEsrStruct","l":"capacity"},{"p":"structs","c":"ResultPumpStruct","l":"capitalcost"},{"p":"structs","c":"PumpGeneralStruct","l":"capitalcost_per_kw"},{"p":"optimizer","c":"redGraph","l":"cartProd(ArrayList<ArrayList<HashMap<edgeGroup, Integer>>>, int)","url":"cartProd(java.util.ArrayList,int)"},{"p":"optimizer","c":"Optimizer","l":"checkAndCreateDir(String)","url":"checkAndCreateDir(java.lang.String)"},{"p":"optimizer","c":"redGraph","l":"checkAndUpdate(ArrayList<HashMap<edgeGroup, Integer>>)","url":"checkAndUpdate(java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"checkFileExist(String)","url":"checkFileExist(java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"checkSolverResultStatus(String)","url":"checkSolverResultStatus(java.lang.String)"},{"p":"optimizer","c":"Pipe","l":"chosenPipeCost"},{"p":"optimizer","c":"Pipe","l":"chosenPipeCost2"},{"p":"structs","c":"CommercialPipeStruct","l":"CommercialPipeStruct(double, double, double, double, double)","url":"%3Cinit%3E(double,double,double,double,double)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"commPipeArray"},{"p":"optimizer","c":"PipeCost","l":"compareTo(PipeCost)","url":"compareTo(optimizer.PipeCost)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"compareVersion(String, String)","url":"compareVersion(java.lang.String,java.lang.String)"},{"p":"optimizer","c":"redGraph","l":"componentSources"},{"p":"optimizer","c":"Constraint","l":"Constraint(String, Linear, String, double)","url":"%3Cinit%3E(java.lang.String,optimizer.Linear,java.lang.String,double)"},{"p":"optimizer","c":"PipeCost","l":"cost"},{"p":"structs","c":"CommercialPipeStruct","l":"cost"},{"p":"structs","c":"PipeStruct","l":"cost"},{"p":"structs","c":"ResultEsrStruct","l":"cost"},{"p":"optimizer","c":"CostFitter","l":"CostFitter()","url":"%3Cinit%3E()"},{"p":"optimizer","c":"CostFunc","l":"CostFunc()","url":"%3Cinit%3E()"},{"p":"optimizer","c":"Cycle_Optimizer","l":"count_bounds"},{"p":"org.coinor","c":"Ipopt","l":"CPUTIME_EXCEEDED"},{"p":"org.coinor","c":"Ipopt","l":"create(int, int, int, int, int)","url":"create(int,int,int,int,int)"},{"p":"optimizer","c":"Optimizer","l":"createGamsModel(String, String, String)","url":"createGamsModel(java.lang.String,java.lang.String,java.lang.String)"},{"p":"org.coinor","c":"Ipopt","l":"CreateIpoptProblem(int, int, int, int, int)","url":"CreateIpoptProblem(int,int,int,int,int)"},{"p":"optimizer","c":"Optimizer","l":"createNetworkFile()"},{"p":"structs","c":"CommercialPipeStruct","l":"cumulativecost"},{"p":"structs","c":"ResultEsrStruct","l":"cumulativecost"},{"p":"optimizer","c":"Cycle_Optimizer","l":"Cycle_Optimizer(HashMap<Pipe, Integer>, HashMap<Node, Integer>, HashMap<PipeCost, Integer>, int[][], int[][], int[][], double, double, double, HashMap<Integer, Pipe>, Formulation)","url":"%3Cinit%3E(java.util.HashMap,java.util.HashMap,java.util.HashMap,int[][],int[][],int[][],double,double,double,java.util.HashMap,optimizer.Formulation)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"cycleFlowDir"},{"p":"structs","c":"NodeStruct","l":"dailydemand"},{"p":"optimizer","c":"Cycle_Optimizer","l":"dcount_start"},{"p":"structs","c":"GeneralStruct","l":"def_pipe_roughness"},{"p":"optimizer","c":"Optimizer","l":"deleteNetworkResults(String)","url":"deleteNetworkResults(java.lang.String)"},{"p":"optimizer","c":"Node","l":"demand"},{"p":"structs","c":"NodeStruct","l":"demand"},{"p":"structs","c":"PumpGeneralStruct","l":"design_lifetime"},{"p":"structs","c":"MapPipeStruct","l":"destinationid"},{"p":"optimizer","c":"Pipe","l":"diameter"},{"p":"optimizer","c":"PipeCost","l":"diameter"},{"p":"structs","c":"CommercialPipeStruct","l":"diameter"},{"p":"structs","c":"PipeStruct","l":"diameter"},{"p":"optimizer","c":"Pipe","l":"diameter2"},{"p":"structs","c":"PumpGeneralStruct","l":"discount_rate"},{"p":"optimizer","c":"Formulation","l":"DISCRETE_SEGMENT"},{"p":"org.coinor","c":"Ipopt","l":"dispose()"},{"p":"org.coinor","c":"Ipopt","l":"DIVERGING_ITERATES"},{"p":"org.coinor","c":"Ipopt","l":"DLLNAME"},{"p":"org.coinor","c":"Ipopt","l":"DLLPATH"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"doGet(HttpServletRequest, HttpServletResponse)","url":"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"doPost(HttpServletRequest, HttpServletResponse)","url":"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"},{"p":"optimizer","c":"Node","l":"downstreamNodes"},{"p":"optimizer","c":"edgeGroup","l":"edgeGroup(int, int, int)","url":"%3Cinit%3E(int,int,int)"},{"p":"optimizer","c":"edgeGroup","l":"edgeGroup(int, int)","url":"%3Cinit%3E(int,int)"},{"p":"optimizer","c":"edgeGroup","l":"edgeMapping"},{"p":"optimizer","c":"redGraph","l":"edgeMultOrientations(Iterator<edgeGroup>, int, ArrayList<HashMap<edgeGroup, Integer>>)","url":"edgeMultOrientations(java.util.Iterator,int,java.util.ArrayList)"},{"p":"structs","c":"PumpGeneralStruct","l":"efficiency"},{"p":"optimizer","c":"Node","l":"elevation"},{"p":"structs","c":"NodeStruct","l":"elevation"},{"p":"structs","c":"ResultEsrStruct","l":"elevation"},{"p":"structs","c":"MapPipeStruct","l":"encodedpath"},{"p":"optimizer","c":"redGraph","l":"end"},{"p":"structs","c":"PipeStruct","l":"endnode"},{"p":"optimizer","c":"Pipe","l":"endNode"},{"p":"structs","c":"ResultPumpStruct","l":"energycost"},{"p":"structs","c":"PumpGeneralStruct","l":"energycost_factor"},{"p":"structs","c":"PumpGeneralStruct","l":"energycost_per_kwh"},{"p":"optimizer","c":"redGraph","l":"enumerateOrientations()"},{"p":"optimizer","c":"redGraph","l":"enumerateOrientations(ArrayList<HashMap<edgeGroup, Integer>>)","url":"enumerateOrientations(java.util.ArrayList)"},{"p":"org.coinor","c":"Ipopt","l":"ERROR_IN_STEP_COMPUTATION"},{"p":"structs","c":"NodeStruct","l":"esr"},{"p":"optimizer","c":"Node","l":"ESR"},{"p":"structs","c":"EsrGeneralStruct","l":"esr_capacity_factor"},{"p":"structs","c":"EsrGeneralStruct","l":"esr_enabled"},{"p":"optimizer","c":"Optimizer","l":"esrCapacityFactor"},{"p":"optimizer","c":"Node","l":"esrCost"},{"p":"optimizer","c":"Optimizer","l":"esrCost"},{"p":"optimizer","c":"EsrCost","l":"EsrCost(double, double, double, double)","url":"%3Cinit%3E(double,double,double,double)"},{"p":"structs","c":"EsrCostStruct","l":"EsrCostStruct(double, double, double, double)","url":"%3Cinit%3E(double,double,double,double)"},{"p":"optimizer","c":"Optimizer","l":"esrGeneralProperties"},{"p":"structs","c":"EsrGeneralStruct","l":"EsrGeneralStruct(boolean, double, double, double, boolean, int[], int[])","url":"%3Cinit%3E(boolean,double,double,double,boolean,int[],int[])"},{"p":"structs","c":"ResultEsrStruct","l":"esrheight"},{"p":"optimizer","c":"Node","l":"esrHeight"},{"p":"optimizer","c":"Node","l":"esrTotalDemand"},{"p":"optimizer","c":"Cycle_Optimizer","l":"eval_f(int, double[], boolean, double[])","url":"eval_f(int,double[],boolean,double[])"},{"p":"org.coinor","c":"Ipopt","l":"eval_f(int, double[], boolean, double[])","url":"eval_f(int,double[],boolean,double[])"},{"p":"optimizer","c":"Cycle_Optimizer","l":"eval_g(int, double[], boolean, int, double[])","url":"eval_g(int,double[],boolean,int,double[])"},{"p":"org.coinor","c":"Ipopt","l":"eval_g(int, double[], boolean, int, double[])","url":"eval_g(int,double[],boolean,int,double[])"},{"p":"optimizer","c":"Cycle_Optimizer","l":"eval_grad_f(int, double[], boolean, double[])","url":"eval_grad_f(int,double[],boolean,double[])"},{"p":"org.coinor","c":"Ipopt","l":"eval_grad_f(int, double[], boolean, double[])","url":"eval_grad_f(int,double[],boolean,double[])"},{"p":"optimizer","c":"Cycle_Optimizer","l":"eval_h(int, double[], boolean, double, int, double[], boolean, int, int[], int[], double[])","url":"eval_h(int,double[],boolean,double,int,double[],boolean,int,int[],int[],double[])"},{"p":"org.coinor","c":"Ipopt","l":"eval_h(int, double[], boolean, double, int, double[], boolean, int, int[], int[], double[])","url":"eval_h(int,double[],boolean,double,int,double[],boolean,int,int[],int[],double[])"},{"p":"optimizer","c":"Cycle_Optimizer","l":"eval_jac_g(int, double[], boolean, int, int, int[], int[], double[])","url":"eval_jac_g(int,double[],boolean,int,int,int[],int[],double[])"},{"p":"org.coinor","c":"Ipopt","l":"eval_jac_g(int, double[], boolean, int, int, int[], int[], double[])","url":"eval_jac_g(int,double[],boolean,int,int,int[],int[],double[])"},{"p":"optimizer","c":"Pipe","l":"existingPipe"},{"p":"optimizer","c":"Pipe","l":"existingPipe()"},{"p":"optimizer","c":"Optimizer","l":"extractSolverResult(String)","url":"extractSolverResult(java.lang.String)"},{"p":"org.coinor","c":"Ipopt","l":"finalize()"},{"p":"optimizer","c":"Cycle_Optimizer","l":"findCommPipe(int)"},{"p":"optimizer","c":"Optimizer","l":"findFileHashInHex(MessageDigest, File)","url":"findFileHashInHex(java.security.MessageDigest,java.io.File)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"findNode(int)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"findPipe(int)"},{"p":"optimizer","c":"Pipe","l":"flow"},{"p":"structs","c":"PipeStruct","l":"flow"},{"p":"optimizer","c":"Pipe","l":"flowchoice"},{"p":"optimizer","c":"Cycle_Optimizer","l":"flowDir"},{"p":"optimizer","c":"Pipe.FlowType","l":"FlowType(int)","url":"%3Cinit%3E(int)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"formulation"},{"p":"optimizer","c":"Formulation","l":"Formulation()","url":"%3Cinit%3E()"},{"p":"org.coinor","c":"Ipopt","l":"FORTRAN_STYLE"},{"p":"org.coinor","c":"Ipopt","l":"FreeIpoptProblem(long)"},{"p":"optimizer","c":"redGraph","l":"fromChildOrient(ArrayList<HashMap<edgeGroup, Integer>>)","url":"fromChildOrient(java.util.ArrayList)"},{"p":"org.coinor","c":"Ipopt","l":"g"},{"p":"optimizer","c":"Cycle_Optimizer","l":"gamma"},{"p":"optimizer","c":"Optimizer","l":"generalProperties"},{"p":"structs","c":"GeneralStruct","l":"GeneralStruct(String, String, double, double, double, double, double, double, double, double, double, int, String, double, double)","url":"%3Cinit%3E(java.lang.String,java.lang.String,double,double,double,double,double,double,double,double,double,int,java.lang.String,double,double)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"generateRandomInput()"},{"p":"optimizer","c":"Optimizer","l":"generateUniqueFileName(String)","url":"generateUniqueFileName(java.lang.String)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"get_bounds_info(int, double[], double[], int, double[], double[])","url":"get_bounds_info(int,double[],double[],int,double[],double[])"},{"p":"org.coinor","c":"Ipopt","l":"get_bounds_info(int, double[], double[], int, double[], double[])","url":"get_bounds_info(int,double[],double[],int,double[],double[])"},{"p":"org.coinor","c":"Ipopt","l":"get_list_of_nonlinear_variables(int, int[])","url":"get_list_of_nonlinear_variables(int,int[])"},{"p":"org.coinor","c":"Ipopt","l":"get_number_of_nonlinear_variables()"},{"p":"org.coinor","c":"Ipopt","l":"get_scaling_parameters(double[], int, double[], int, double[], boolean[])","url":"get_scaling_parameters(double[],int,double[],int,double[],boolean[])"},{"p":"optimizer","c":"Cycle_Optimizer","l":"get_starting_point(int, boolean, double[], boolean, double[], double[], int, boolean, double[])","url":"get_starting_point(int,boolean,double[],boolean,double[],double[],int,boolean,double[])"},{"p":"org.coinor","c":"Ipopt","l":"get_starting_point(int, boolean, double[], boolean, double[], double[], int, boolean, double[])","url":"get_starting_point(int,boolean,double[],boolean,double[],double[],int,boolean,double[])"},{"p":"optimizer","c":"Node","l":"getAllowESR()"},{"p":"optimizer","c":"Pipe","l":"getAllowPump()"},{"p":"optimizer","c":"EsrCost","l":"getBaseCost()"},{"p":"optimizer","c":"Pipe","l":"getChosenPipeCost()"},{"p":"optimizer","c":"Pipe","l":"getChosenPipeCost2()"},{"p":"org.coinor","c":"Ipopt","l":"getConstraintMultipliers()"},{"p":"optimizer","c":"Problem","l":"getConstraintsCount()"},{"p":"org.coinor","c":"Ipopt","l":"getConstraintValues()"},{"p":"optimizer","c":"PipeCost","l":"getCost()"},{"p":"optimizer","c":"Node","l":"getDemand()"},{"p":"optimizer","c":"Pipe","l":"getDiameter()"},{"p":"optimizer","c":"PipeCost","l":"getDiameter()"},{"p":"optimizer","c":"Pipe","l":"getDiameter2()"},{"p":"optimizer","c":"Node","l":"getDownstreamNodes()"},{"p":"optimizer","c":"Node","l":"getElevation()"},{"p":"optimizer","c":"Pipe","l":"getEndNode()"},{"p":"optimizer","c":"Node","l":"getESR()"},{"p":"optimizer","c":"Node","l":"getEsrCost()"},{"p":"optimizer","c":"Optimizer","l":"getEsrGeneralProperties()"},{"p":"optimizer","c":"Node","l":"getEsrHeight()"},{"p":"optimizer","c":"Node","l":"getEsrTotalDemand()"},{"p":"optimizer","c":"Pipe","l":"getFlow()"},{"p":"optimizer","c":"Pipe","l":"getFlowchoice()"},{"p":"optimizer","c":"Optimizer","l":"getGeneralProperties()"},{"p":"optimizer","c":"Optimizer","l":"getGeneralPropertiesOrganizationName()"},{"p":"optimizer","c":"Optimizer","l":"getGeneralPropertiesProjectName()"},{"p":"optimizer","c":"Node","l":"getHead()"},{"p":"optimizer","c":"edgeGroup","l":"getID()"},{"p":"optimizer","c":"redGraph","l":"getIndexList(long, ArrayList<Integer>)","url":"getIndexList(long,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"getIntermediateResults(File)","url":"getIntermediateResults(java.io.File)"},{"p":"optimizer","c":"Optimizer","l":"getIntermediateTime(File)","url":"getIntermediateTime(java.io.File)"},{"p":"optimizer","c":"Pipe","l":"getLength()"},{"p":"optimizer","c":"Pipe","l":"getLength2()"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"getLinearElevation(int, int, double, double, NodeStruct[])","url":"getLinearElevation(int,int,double,double,structs.NodeStruct[])"},{"p":"org.coinor","c":"Ipopt","l":"getLowerBoundMultipliers()"},{"p":"optimizer","c":"edgeGroup","l":"getMapping()"},{"p":"optimizer","c":"edgeGroup","l":"getMappingSize()"},{"p":"optimizer","c":"EsrCost","l":"getMaxCapacity()"},{"p":"optimizer","c":"PipeCost","l":"getMaxPressure()"},{"p":"optimizer","c":"EsrCost","l":"getMinCapacity()"},{"p":"optimizer","c":"Optimizer","l":"getMinutesToDisplay(String)","url":"getMinutesToDisplay(java.lang.String)"},{"p":"optimizer","c":"edgeGroup","l":"getNode1()"},{"p":"optimizer","c":"edgeGroup","l":"getNode2()"},{"p":"optimizer","c":"Node","l":"getNodeID()"},{"p":"optimizer","c":"Node","l":"getNodeName()"},{"p":"optimizer","c":"Optimizer","l":"getNodes()"},{"p":"optimizer","c":"Problem","l":"getNodes()"},{"p":"optimizer","c":"Result","l":"getObjectiveValue()"},{"p":"org.coinor","c":"Ipopt","l":"getObjectiveValue()"},{"p":"optimizer","c":"Cycle_Optimizer","l":"getOrientation()"},{"p":"optimizer","c":"Node","l":"getOutgoingPipes()"},{"p":"optimizer","c":"Optimizer","l":"getPipeCost()"},{"p":"optimizer","c":"Pipe","l":"getPipeID()"},{"p":"optimizer","c":"Optimizer","l":"getPipes()"},{"p":"optimizer","c":"Node","l":"getPressure()"},{"p":"optimizer","c":"Problem","l":"getPrimalValue(String)","url":"getPrimalValue(java.lang.String)"},{"p":"optimizer","c":"Result","l":"getPrimalValue(String)","url":"getPrimalValue(java.lang.String)"},{"p":"optimizer","c":"CostFitter","l":"getProblem(Collection<WeightedObservedPoint>)","url":"getProblem(java.util.Collection)"},{"p":"optimizer","c":"Optimizer","l":"getPumpGeneralProperties()"},{"p":"optimizer","c":"Pipe","l":"getPumpHead()"},{"p":"optimizer","c":"Pipe","l":"getPumpPower()"},{"p":"optimizer","c":"Node","l":"getRequiredCapacity(double)"},{"p":"optimizer","c":"Node","l":"getResidualPressure()"},{"p":"optimizer","c":"Pipe","l":"getRoughness()"},{"p":"optimizer","c":"PipeCost","l":"getRoughness()"},{"p":"optimizer","c":"Pipe","l":"getRoughness2()"},{"p":"optimizer","c":"Node","l":"getServedNodes()"},{"p":"optimizer","c":"redGraph","l":"getSizeList(ArrayList<ArrayList<HashMap<edgeGroup, Integer>>>)","url":"getSizeList(java.util.ArrayList)"},{"p":"optimizer","c":"Node","l":"getSourceToNodePipes()"},{"p":"optimizer","c":"Pipe","l":"getStartNode()"},{"p":"org.coinor","c":"Ipopt","l":"getStatus()"},{"p":"optimizer","c":"Problem","l":"getTimeTaken()"},{"p":"optimizer","c":"Optimizer","l":"getTimeToDisplay(String)","url":"getTimeToDisplay(java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"getTotalCapacity()"},{"p":"optimizer","c":"redGraph","l":"getTotalOrient(ArrayList<ArrayList<HashMap<edgeGroup, Integer>>>)","url":"getTotalOrient(java.util.ArrayList)"},{"p":"optimizer","c":"EsrCost","l":"getUnitCost()"},{"p":"org.coinor","c":"Ipopt","l":"getUpperBoundMultipliers()"},{"p":"optimizer","c":"Node","l":"getUpstreamNodes()"},{"p":"optimizer","c":"Pipe.FlowType","l":"getValue()"},{"p":"optimizer","c":"Pipe","l":"getValveSetting()"},{"p":"org.coinor","c":"Ipopt","l":"getVariableValues()"},{"p":"optimizer","c":"CostFunc","l":"gradient(double, double...)","url":"gradient(double,double...)"},{"p":"optimizer","c":"redGraph","l":"graphDFS(HashMap<Integer, Integer>, HashMap<Integer, Integer>, int, int, HashMap<Integer, Boolean>, Set<edgeGroup>)","url":"graphDFS(java.util.HashMap,java.util.HashMap,int,int,java.util.HashMap,java.util.Set)"},{"p":"structs","c":"ResultEsrStruct","l":"hasprimarychild"},{"p":"optimizer","c":"Node","l":"head"},{"p":"structs","c":"NodeStruct","l":"head"},{"p":"structs","c":"PipeStruct","l":"headloss"},{"p":"structs","c":"PipeStruct","l":"headlossperkm"},{"p":"optimizer","c":"Util","l":"HWheadLoss(double, double, double, double)","url":"HWheadLoss(double,double,double,double)"},{"p":"optimizer","c":"Util","l":"HWheadLoss(double, double, double)","url":"HWheadLoss(double,double,double)"},{"p":"optimizer","c":"edgeGroup","l":"ID"},{"p":"org.coinor","c":"Ipopt","l":"INFEASIBLE_PROBLEM"},{"p":"structs","c":"PumpGeneralStruct","l":"inflation_rate"},{"p":"optimizer","c":"Cycle_Optimizer","l":"inputPipes"},{"p":"org.coinor","c":"Ipopt","l":"INSUFFICIENT_MEMORY"},{"p":"org.coinor","c":"Ipopt","l":"INTERNAL_ERROR"},{"p":"org.coinor","c":"Ipopt","l":"INVALID_NUMBER_DETECTED"},{"p":"org.coinor","c":"Ipopt","l":"INVALID_OPTION"},{"p":"org.coinor","c":"Ipopt","l":"INVALID_PROBLEM_DEFINITION"},{"p":"org.coinor","c":"Ipopt","l":"ipopt"},{"p":"org.coinor","c":"Ipopt","l":"Ipopt()","url":"%3Cinit%3E()"},{"p":"org.coinor","c":"Ipopt","l":"Ipopt(String, String)","url":"%3Cinit%3E(java.lang.String,java.lang.String)"},{"p":"optimizer","c":"Pipe","l":"isAllowParallel()"},{"p":"structs","c":"MapNodeStruct","l":"isesr"},{"p":"structs","c":"PipeStruct","l":"isprimary"},{"p":"org.coinor","c":"Ipopt","l":"ITERATION_EXCEEDED"},{"p":"optimizer","c":"Cycle_Optimizer","l":"lambda"},{"p":"structs","c":"MapNodeStruct","l":"latitude"},{"p":"optimizer","c":"Optimizer","l":"launchCalculateNetworkCost(String)","url":"launchCalculateNetworkCost(java.lang.String)"},{"p":"optimizer","c":"Pipe","l":"length"},{"p":"structs","c":"CommercialPipeStruct","l":"length"},{"p":"structs","c":"MapPipeStruct","l":"length"},{"p":"structs","c":"PipeStruct","l":"length"},{"p":"optimizer","c":"Pipe","l":"length2"},{"p":"optimizer","c":"Constraint","l":"linear"},{"p":"optimizer","c":"Linear","l":"Linear()","url":"%3Cinit%3E()"},{"p":"optimizer","c":"Linear","l":"linearVarCoefficients"},{"p":"optimizer","c":"Linear","l":"linearVarNames"},{"p":"optimizer","c":"Optimizer","l":"list_of_times"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"logd(String)","url":"logd(java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"logd(String)","url":"logd(java.lang.String)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"loge(String)","url":"loge(java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"loge(String)","url":"loge(java.lang.String)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"logi(String)","url":"logi(java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"logi(String)","url":"logi(java.lang.String)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"logw(String)","url":"logw(java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"logw(String)","url":"logw(java.lang.String)"},{"p":"structs","c":"MapNodeStruct","l":"longitude"},{"p":"optimizer","c":"Cycle_Optimizer","l":"m"},{"p":"optimizer","c":"redGraph","l":"makeSimpleOrientations()"},{"p":"structs","c":"MapNodeStruct","l":"MapNodeStruct(int, String, double, double, boolean)","url":"%3Cinit%3E(int,java.lang.String,double,double,boolean)"},{"p":"structs","c":"MapPipeStruct","l":"MapPipeStruct(String, int, int, double)","url":"%3Cinit%3E(java.lang.String,int,int,double)"},{"p":"structs","c":"EsrGeneralStruct","l":"max_esr_height"},{"p":"structs","c":"GeneralStruct","l":"max_flow"},{"p":"structs","c":"GeneralStruct","l":"max_hl_perkm"},{"p":"structs","c":"GeneralStruct","l":"max_pipe_pressure"},{"p":"structs","c":"GeneralStruct","l":"max_water_speed"},{"p":"structs","c":"EsrCostStruct","l":"maxcapacity"},{"p":"optimizer","c":"EsrCost","l":"maxCapacity"},{"p":"optimizer","c":"Optimizer","l":"maxEsrHeight"},{"p":"optimizer","c":"Cycle_Optimizer","l":"maxFlow"},{"p":"optimizer","c":"redGraph","l":"maxOrientAtEachStep"},{"p":"optimizer","c":"PipeCost","l":"maxPressure"},{"p":"optimizer","c":"Optimizer","l":"maxPumpHead"},{"p":"optimizer","c":"Optimizer","l":"maxPumpPower"},{"p":"structs","c":"GeneralStruct","l":"min_flow"},{"p":"structs","c":"GeneralStruct","l":"min_hl_perkm"},{"p":"structs","c":"GeneralStruct","l":"min_node_pressure"},{"p":"structs","c":"EsrCostStruct","l":"mincapacity"},{"p":"optimizer","c":"EsrCost","l":"minCapacity"},{"p":"optimizer","c":"Cycle_Optimizer","l":"minFlow"},{"p":"structs","c":"NodeStruct","l":"minpressure"},{"p":"optimizer","c":"Optimizer","l":"minPumpPower"},{"p":"structs","c":"PumpGeneralStruct","l":"minpumpsize"},{"p":"optimizer","c":"Optimizer","l":"modelNumber"},{"p":"org.coinor","c":"Ipopt","l":"mult_g"},{"p":"org.coinor","c":"Ipopt","l":"mult_x_L"},{"p":"org.coinor","c":"Ipopt","l":"mult_x_U"},{"p":"structs","c":"EsrGeneralStruct","l":"must_esr"},{"p":"structs","c":"EsrGeneralStruct","l":"must_not_esr"},{"p":"structs","c":"PumpGeneralStruct","l":"must_not_pump"},{"p":"optimizer","c":"Cycle_Optimizer","l":"n"},{"p":"optimizer","c":"Constraint","l":"name"},{"p":"structs","c":"GeneralStruct","l":"name_organization"},{"p":"structs","c":"GeneralStruct","l":"name_project"},{"p":"optimizer","c":"Cycle_Optimizer","l":"no_commPipes"},{"p":"optimizer","c":"Cycle_Optimizer","l":"no_cycles"},{"p":"optimizer","c":"Cycle_Optimizer","l":"no_nodes"},{"p":"optimizer","c":"Cycle_Optimizer","l":"no_pipes"},{"p":"optimizer","c":"Node","l":"Node(double, double, int, double, String, double, Set<Integer>)","url":"%3Cinit%3E(double,double,int,double,java.lang.String,double,java.util.Set)"},{"p":"optimizer","c":"edgeGroup","l":"node1"},{"p":"optimizer","c":"edgeGroup","l":"node2"},{"p":"optimizer","c":"Cycle_Optimizer","l":"nodeArray"},{"p":"structs","c":"MapNodeStruct","l":"nodeid"},{"p":"structs","c":"NodeStruct","l":"nodeid"},{"p":"structs","c":"ResultEsrStruct","l":"nodeid"},{"p":"optimizer","c":"Node","l":"nodeID"},{"p":"structs","c":"MapNodeStruct","l":"nodename"},{"p":"structs","c":"NodeStruct","l":"nodename"},{"p":"structs","c":"ResultEsrStruct","l":"nodename"},{"p":"optimizer","c":"Node","l":"nodeName"},{"p":"optimizer","c":"Optimizer","l":"nodes"},{"p":"structs","c":"NodeStruct","l":"NodeStruct(int, String, double, double, double, double, double, double, int)","url":"%3Cinit%3E(int,java.lang.String,double,double,double,double,double,double,int)"},{"p":"org.coinor","c":"Ipopt","l":"NON_IPOPT_EXCEPTION"},{"p":"org.coinor","c":"Ipopt","l":"NOT_ENOUGH_DEGREES_OF_FRE"},{"p":"org.coinor","c":"Ipopt","l":"obj_val"},{"p":"optimizer","c":"Optimizer","l":"Optimize(String)","url":"Optimize(java.lang.String)"},{"p":"org.coinor","c":"Ipopt","l":"OptimizeNLP()"},{"p":"optimizer","c":"Cycle_Optimizer","l":"OptimizeNLP(double)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"OptimizeNLP(HashMap<Pipe, Integer>)","url":"OptimizeNLP(java.util.HashMap)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"OptimizeNLP(long)"},{"p":"optimizer","c":"Optimizer","l":"Optimizer(NodeStruct[], PipeStruct[], CommercialPipeStruct[], GeneralStruct, EsrGeneralStruct, EsrCostStruct[], PumpGeneralStruct, PumpManualStruct[], ValveStruct[])","url":"%3Cinit%3E(structs.NodeStruct[],structs.PipeStruct[],structs.CommercialPipeStruct[],structs.GeneralStruct,structs.EsrGeneralStruct,structs.EsrCostStruct[],structs.PumpGeneralStruct,structs.PumpManualStruct[],structs.ValveStruct[])"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"OptimizerServlet()","url":"%3Cinit%3E()"},{"p":"org.coinor","c":"Ipopt","l":"OptimizeTNLP(long, double[], double[], double[], double[], double[], double[], double[], double[], double[])","url":"OptimizeTNLP(long,double[],double[],double[],double[],double[],double[],double[],double[],double[])"},{"p":"optimizer","c":"Cycle_Optimizer","l":"orientation"},{"p":"optimizer","c":"redGraph","l":"orientEdgeSink(edgeGroup, Set<edgeGroup>, HashMap<Integer, Set<edgeGroup>>, int)","url":"orientEdgeSink(optimizer.edgeGroup,java.util.Set,java.util.HashMap,int)"},{"p":"optimizer","c":"redGraph","l":"orientSink(int, Set<edgeGroup>, HashMap<Integer, Set<edgeGroup>>, int)","url":"orientSink(int,java.util.Set,java.util.HashMap,int)"},{"p":"optimizer","c":"edgeGroup","l":"orientToNode(int)"},{"p":"structs","c":"MapPipeStruct","l":"originid"},{"p":"optimizer","c":"edgeGroup","l":"otherNode(int)"},{"p":"optimizer","c":"Node","l":"outgoingPipes"},{"p":"optimizer","c":"Formulation","l":"PARALLEL_LINK"},{"p":"structs","c":"PipeStruct","l":"parallelallowed"},{"p":"optimizer","c":"redGraph","l":"parentGraph"},{"p":"optimizer","c":"redGraph","l":"parentIsNetwork"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"performNonOptimizationRelatedAction(HttpServletRequest, HttpServletResponse, String)","url":"performNonOptimizationRelatedAction(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"performOptimization(HttpServletRequest, HttpServletResponse)","url":"performOptimization(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"},{"p":"optimizer","c":"Pipe","l":"Pipe(double, Node, Node, double, double, int, boolean, Set<Integer>)","url":"%3Cinit%3E(double,optimizer.Node,optimizer.Node,double,double,int,boolean,java.util.Set)"},{"p":"optimizer","c":"Cycle_Optimizer","l":"pipeArray"},{"p":"optimizer","c":"Optimizer","l":"pipeCost"},{"p":"optimizer","c":"PipeCost","l":"PipeCost(double, double, double, double)","url":"%3Cinit%3E(double,double,double,double)"},{"p":"structs","c":"PipeStruct","l":"pipeid"},{"p":"structs","c":"PumpManualStruct","l":"pipeid"},{"p":"structs","c":"ResultPumpStruct","l":"pipeid"},{"p":"structs","c":"ValveStruct","l":"pipeid"},{"p":"optimizer","c":"Pipe","l":"pipeID"},{"p":"optimizer","c":"Optimizer","l":"pipes"},{"p":"structs","c":"PipeStruct","l":"PipeStruct(int, int, int, double, double, double, double, double, double, double, double, boolean, boolean, boolean, double, double, double)","url":"%3Cinit%3E(int,int,int,double,double,double,double,double,double,double,double,boolean,boolean,boolean,double,double,double)"},{"p":"optimizer","c":"Util","l":"presentValueFactor(double, double, int)","url":"presentValueFactor(double,double,int)"},{"p":"structs","c":"NodeStruct","l":"pressure"},{"p":"structs","c":"PipeStruct","l":"pressureexceeded"},{"p":"optimizer","c":"Pipe.FlowType","l":"PRIMARY"},{"p":"optimizer","c":"Cycle_Optimizer","l":"primLinkFlow"},{"p":"optimizer","c":"Optimizer","l":"printModelm1(BufferedWriter)","url":"printModelm1(java.io.BufferedWriter)"},{"p":"optimizer","c":"Optimizer","l":"printModelm2(BufferedWriter)","url":"printModelm2(java.io.BufferedWriter)"},{"p":"optimizer","c":"Optimizer","l":"printParameters(BufferedWriter, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, String)","url":"printParameters(java.io.BufferedWriter,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"printSets(BufferedWriter, ArrayList<String>, ArrayList<String>, ArrayList<String>, String)","url":"printSets(java.io.BufferedWriter,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"printSetsAndParametersAndModels(String, String, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, ArrayList<String>, String, String)","url":"printSetsAndParametersAndModels(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.String,java.lang.String)"},{"p":"optimizer","c":"Result","l":"problem"},{"p":"optimizer","c":"Problem","l":"Problem()","url":"%3Cinit%3E()"},{"p":"structs","c":"PumpGeneralStruct","l":"pump_enabled"},{"p":"optimizer","c":"Optimizer","l":"pumpGeneralProperties"},{"p":"structs","c":"PumpGeneralStruct","l":"PumpGeneralStruct(boolean, double, double, double, double, double, double, double, int, int[])","url":"%3Cinit%3E(boolean,double,double,double,double,double,double,double,int,int[])"},{"p":"optimizer","c":"Pipe","l":"pumphead"},{"p":"structs","c":"PipeStruct","l":"pumphead"},{"p":"structs","c":"ResultPumpStruct","l":"pumphead"},{"p":"optimizer","c":"Optimizer","l":"pumpManualArray"},{"p":"structs","c":"PumpManualStruct","l":"PumpManualStruct(int, double)","url":"%3Cinit%3E(int,double)"},{"p":"optimizer","c":"Pipe","l":"pumppower"},{"p":"structs","c":"PipeStruct","l":"pumppower"},{"p":"structs","c":"PumpManualStruct","l":"pumppower"},{"p":"structs","c":"ResultPumpStruct","l":"pumppower"},{"p":"optimizer","c":"Formulation","l":"RE_SOLVING"},{"p":"optimizer","c":"Optimizer","l":"readArcs(Scanner, ArrayList<String>, ArrayList<String>)","url":"readArcs(java.util.Scanner,java.util.ArrayList,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"readCost(Scanner, ArrayList<String>)","url":"readCost(java.util.Scanner,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"readDemand(Scanner, ArrayList<String>)","url":"readDemand(java.util.Scanner,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"readDiameter(Scanner, ArrayList<String>)","url":"readDiameter(java.util.Scanner,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"readElevation(Scanner, ArrayList<String>)","url":"readElevation(java.util.Scanner,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"readFileAsString(String)","url":"readFileAsString(java.lang.String)"},{"p":"optimizer","c":"Optimizer","l":"readHead(Scanner)","url":"readHead(java.util.Scanner)"},{"p":"optimizer","c":"Optimizer","l":"readnodes(Scanner, ArrayList<String>)","url":"readnodes(java.util.Scanner,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"readPipes(Scanner, ArrayList<String>)","url":"readPipes(java.util.Scanner,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"readPressure(Scanner, ArrayList<String>)","url":"readPressure(java.util.Scanner,java.util.ArrayList)"},{"p":"optimizer","c":"Optimizer","l":"readRoughness(Scanner, ArrayList<String>)","url":"readRoughness(java.util.Scanner,java.util.ArrayList)"},{"p":"optimizer","c":"redGraph","l":"redGraph(int, ArrayList<Integer>, int)","url":"%3Cinit%3E(int,java.util.ArrayList,int)"},{"p":"optimizer","c":"redGraph","l":"redGraph(int, redGraph, ArrayList<Integer>, int)","url":"%3Cinit%3E(int,optimizer.redGraph,java.util.ArrayList,int)"},{"p":"optimizer","c":"redGraph","l":"redGraphDFS(redGraph, edgeGroup, int, HashMap<Integer, Boolean>, Boolean, int, HashMap<Integer, Integer>, Set<edgeGroup>, Set<edgeGroup>)","url":"redGraphDFS(optimizer.redGraph,optimizer.edgeGroup,int,java.util.HashMap,java.lang.Boolean,int,java.util.HashMap,java.util.Set,java.util.Set)"},{"p":"optimizer","c":"redGraph","l":"reduce()"},{"p":"optimizer","c":"redGraph","l":"reducedSources"},{"p":"optimizer","c":"redGraph","l":"reduceSize(ArrayList<HashMap<edgeGroup, Integer>>)","url":"reduceSize(java.util.ArrayList)"},{"p":"optimizer","c":"redGraph","l":"reducible()"},{"p":"optimizer","c":"Node","l":"residualPressure"},{"p":"org.coinor","c":"Ipopt","l":"RESTORATION_FAILED"},{"p":"optimizer","c":"Result","l":"Result(Problem)","url":"%3Cinit%3E(optimizer.Problem)"},{"p":"optimizer","c":"Optimizer","l":"resultCost"},{"p":"structs","c":"ResultEsrStruct","l":"ResultEsrStruct(int, String, double, double, double, double, double, boolean)","url":"%3Cinit%3E(int,java.lang.String,double,double,double,double,double,boolean)"},{"p":"optimizer","c":"Optimizer","l":"resultPipes"},{"p":"optimizer","c":"Optimizer","l":"resultPumps"},{"p":"structs","c":"ResultPumpStruct","l":"ResultPumpStruct(int, double, double, double, double, double)","url":"%3Cinit%3E(int,double,double,double,double,double)"},{"p":"optimizer","c":"redGraph","l":"revOrient(ArrayList<Integer>)","url":"revOrient(java.util.ArrayList)"},{"p":"optimizer","c":"Constraint","l":"rhs"},{"p":"optimizer","c":"Pipe","l":"roughness"},{"p":"optimizer","c":"PipeCost","l":"roughness"},{"p":"structs","c":"CommercialPipeStruct","l":"roughness"},{"p":"structs","c":"PipeStruct","l":"roughness"},{"p":"optimizer","c":"Pipe","l":"roughness2"},{"p":"optimizer","c":"Util","l":"round(double, int)","url":"round(double,int)"},{"p":"optimizer","c":"Optimizer","l":"run_Time"},{"p":"optimizer","c":"Cycle_Optimizer","l":"safe_pow(double, double)","url":"safe_pow(double,double)"},{"p":"org.coinor","c":"Ipopt","l":"SEARCH_DIRECTION_TOO_SMALL"},{"p":"optimizer","c":"Pipe.FlowType","l":"SECONDARY"},{"p":"structs","c":"EsrGeneralStruct","l":"secondary_supply_hours"},{"p":"optimizer","c":"Optimizer","l":"secondaryFlowFactor"},{"p":"optimizer","c":"Cycle_Optimizer","l":"seed"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"serialVersionUID"},{"p":"optimizer","c":"Node","l":"servedNodes"},{"p":"optimizer","c":"Node","l":"setAllowESR(boolean)"},{"p":"optimizer","c":"Pipe","l":"setAllowPump(boolean)"},{"p":"optimizer","c":"Pipe","l":"setChosenPipeCost(PipeCost)","url":"setChosenPipeCost(optimizer.PipeCost)"},{"p":"optimizer","c":"Pipe","l":"setChosenPipeCost2(PipeCost)","url":"setChosenPipeCost2(optimizer.PipeCost)"},{"p":"optimizer","c":"Node","l":"setCustomID(int, Set<Integer>)","url":"setCustomID(int,java.util.Set)"},{"p":"optimizer","c":"Pipe","l":"setCustomID(int, Set<Integer>)","url":"setCustomID(int,java.util.Set)"},{"p":"optimizer","c":"Node","l":"setDemand(double)"},{"p":"optimizer","c":"Pipe","l":"setDiameter(Double)","url":"setDiameter(java.lang.Double)"},{"p":"optimizer","c":"Pipe","l":"setDiameter2(Double)","url":"setDiameter2(java.lang.Double)"},{"p":"optimizer","c":"Node","l":"setESR(int)"},{"p":"optimizer","c":"Node","l":"setEsrCost(double)"},{"p":"optimizer","c":"Node","l":"setEsrHeight(double)"},{"p":"optimizer","c":"Node","l":"setEsrTotalDemand(double)"},{"p":"optimizer","c":"Pipe","l":"setFlow(double)"},{"p":"optimizer","c":"Pipe","l":"setFlowchoice(Pipe.FlowType)","url":"setFlowchoice(optimizer.Pipe.FlowType)"},{"p":"optimizer","c":"Node","l":"setHead(double)"},{"p":"org.coinor","c":"Ipopt","l":"setIntegerOption(String, int)","url":"setIntegerOption(java.lang.String,int)"},{"p":"optimizer","c":"Pipe","l":"setLength2(double)"},{"p":"org.coinor","c":"Ipopt","l":"setNumericOption(String, double)","url":"setNumericOption(java.lang.String,double)"},{"p":"optimizer","c":"Problem","l":"setObjective(Linear, boolean)","url":"setObjective(optimizer.Linear,boolean)"},{"p":"optimizer","c":"Pipe","l":"setPumpHead(double)"},{"p":"optimizer","c":"Pipe","l":"setPumpPower(double)"},{"p":"optimizer","c":"Pipe","l":"setRoughness(double)"},{"p":"optimizer","c":"Pipe","l":"setRoughness2(double)"},{"p":"org.coinor","c":"Ipopt","l":"setStringOption(String, String)","url":"setStringOption(java.lang.String,java.lang.String)"},{"p":"optimizer","c":"Problem","l":"setTimeLimit(int)"},{"p":"optimizer","c":"Pipe","l":"setValveSetting(double)"},{"p":"optimizer","c":"Problem","l":"setVarLowerBound(String, double)","url":"setVarLowerBound(java.lang.String,double)"},{"p":"optimizer","c":"Problem","l":"setVarType(String, Class<?>)","url":"setVarType(java.lang.String,java.lang.Class)"},{"p":"optimizer","c":"Problem","l":"setVarUpperBound(String, int)","url":"setVarUpperBound(java.lang.String,int)"},{"p":"optimizer","c":"Constraint","l":"sign"},{"p":"optimizer","c":"redGraph","l":"simpleDFS(HashMap<Integer, Set<Integer>>, int, HashMap<Integer, Boolean>, HashMap<Integer, ArrayList<Integer>>, int)","url":"simpleDFS(java.util.HashMap,int,java.util.HashMap,java.util.HashMap,int)"},{"p":"optimizer","c":"redGraph","l":"simpleGraph"},{"p":"optimizer","c":"redGraph","l":"simpPermute(ArrayList<ArrayList<Integer>>, HashMap<Integer, Integer>)","url":"simpPermute(java.util.ArrayList,java.util.HashMap)"},{"p":"optimizer","c":"redGraph","l":"simpToMultOrientations(ArrayList<HashMap<edgeGroup, Integer>>)","url":"simpToMultOrientations(java.util.ArrayList)"},{"p":"org.coinor","c":"Ipopt","l":"SOLVE_SUCCEEDED"},{"p":"optimizer","c":"Problem","l":"solve()"},{"p":"optimizer","c":"Problem","l":"solver"},{"p":"optimizer","c":"Optimizer","l":"SOLVER_1_NEW_FILE_DIR"},{"p":"optimizer","c":"Optimizer","l":"SOLVER_2_HASH_FILE_DIR"},{"p":"optimizer","c":"Optimizer","l":"SOLVER_3_AUTO_SOLVE_SCRIPT_DIR"},{"p":"optimizer","c":"Optimizer","l":"SOLVER_EXECUTION_TIME"},{"p":"optimizer","c":"Optimizer","l":"SOLVER_EXECUTION_TIME_DISPLAY_STR"},{"p":"optimizer","c":"Optimizer","l":"SOLVER_ROOT_DIR"},{"p":"optimizer","c":"Optimizer","l":"source"},{"p":"optimizer","c":"redGraph","l":"source"},{"p":"structs","c":"GeneralStruct","l":"source_elevation"},{"p":"structs","c":"GeneralStruct","l":"source_head"},{"p":"structs","c":"GeneralStruct","l":"source_nodeid"},{"p":"structs","c":"GeneralStruct","l":"source_nodename"},{"p":"optimizer","c":"Cycle_Optimizer","l":"sourceHead"},{"p":"optimizer","c":"Node","l":"sourceToNodePipes"},{"p":"structs","c":"PipeStruct","l":"speed"},{"p":"optimizer","c":"Cycle_Optimizer","l":"start"},{"p":"structs","c":"PipeStruct","l":"startnode"},{"p":"optimizer","c":"Pipe","l":"startNode"},{"p":"org.coinor","c":"Ipopt","l":"status"},{"p":"structs","c":"GeneralStruct","l":"supply_hours"},{"p":"optimizer","c":"redGraph","l":"toDerivedSimple(HashMap<Integer, Integer>)","url":"toDerivedSimple(java.util.HashMap)"},{"p":"optimizer","c":"redGraph","l":"toSimple()"},{"p":"optimizer","c":"Constraint","l":"toString()"},{"p":"structs","c":"CommercialPipeStruct","l":"toString()"},{"p":"structs","c":"EsrCostStruct","l":"toString()"},{"p":"structs","c":"EsrGeneralStruct","l":"toString()"},{"p":"structs","c":"GeneralStruct","l":"toString()"},{"p":"structs","c":"MapNodeStruct","l":"toString()"},{"p":"structs","c":"MapPipeStruct","l":"toString()"},{"p":"structs","c":"NodeStruct","l":"toString()"},{"p":"structs","c":"PipeStruct","l":"toString()"},{"p":"structs","c":"PumpGeneralStruct","l":"toString()"},{"p":"structs","c":"PumpManualStruct","l":"toString()"},{"p":"structs","c":"ResultEsrStruct","l":"toString()"},{"p":"structs","c":"ResultPumpStruct","l":"toString()"},{"p":"structs","c":"ValveStruct","l":"toString()"},{"p":"structs","c":"ResultPumpStruct","l":"totalcost"},{"p":"optimizer","c":"edgeGroup","l":"towards(int)"},{"p":"structs","c":"EsrCostStruct","l":"unitcost"},{"p":"optimizer","c":"EsrCost","l":"unitCost"},{"p":"org.coinor","c":"Ipopt","l":"UNRECOVERABLE_EXCEPTION"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"uploadEpanetOutputFile(HttpServletRequest, HttpServletResponse)","url":"uploadEpanetOutputFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"uploadExcelInputFile(HttpServletRequest, HttpServletResponse)","url":"uploadExcelInputFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"uploadExcelOutputFile(HttpServletRequest, HttpServletResponse)","url":"uploadExcelOutputFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"uploadMapSnapshotFile(HttpServletRequest, HttpServletResponse)","url":"uploadMapSnapshotFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"uploadXmlInputFile(HttpServletRequest, HttpServletResponse)","url":"uploadXmlInputFile(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"},{"p":"optimizer","c":"Node","l":"upstreamNodes"},{"p":"org.coinor","c":"Ipopt","l":"USER_REQUESTED_STOP"},{"p":"optimizer","c":"Util","l":"Util()","url":"%3Cinit%3E()"},{"p":"optimizer","c":"Optimizer","l":"validateNetwork()"},{"p":"optimizer","c":"Pipe.FlowType","l":"value"},{"p":"optimizer","c":"CostFunc","l":"value(double, double...)","url":"value(double,double...)"},{"p":"optimizer","c":"Formulation","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"optimizer","c":"Pipe.FlowType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"optimizer","c":"Formulation","l":"values()"},{"p":"optimizer","c":"Pipe.FlowType","l":"values()"},{"p":"optimizer","c":"Optimizer","l":"valves"},{"p":"optimizer","c":"Pipe","l":"valvesetting"},{"p":"structs","c":"PipeStruct","l":"valvesetting"},{"p":"structs","c":"ValveStruct","l":"valvesetting"},{"p":"structs","c":"ValveStruct","l":"ValveStruct(int, double)","url":"%3Cinit%3E(int,double)"},{"p":"<Unnamed>","c":"OptimizerServlet","l":"version"},{"p":"optimizer","c":"Util","l":"waterSpeed(double, double)","url":"waterSpeed(double,double)"},{"p":"org.coinor","c":"Ipopt","l":"x"}]